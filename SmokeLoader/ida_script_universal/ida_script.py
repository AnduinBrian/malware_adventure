import idc, idaapi

def GetTextSegment():
    startEA = 0
    for ea in Segments():
        startEA = ea
        break
        
    endEA = get_segm_end(startEA)
    return startEA, endEA

def patch_nop():
    startEA, endEA = GetTextSegment()
    pattern = ["74 ?? 75 ??", "75 ?? 74 ??"]
    need_patch = []
    for i in pattern:
        currentAddr = startEA
        while True:
            currentAddr = idaapi.find_binary(currentAddr, endEA, i, 16, idaapi.SEARCH_DOWN)
            if currentAddr == idaapi.BADADDR:
                break
            else:
                need_patch.append(currentAddr)
                currentAddr += len(i)
    for i in need_patch:
        idaapi.patch_byte(i, 0xeb)
        idaapi.patch_byte(i + 2, 0x90)
        idaapi.patch_byte(i+3,0x90)

def xor_func(startEA, size, xor):
    byte = get_bytes(startEA, size)
    decryt = []
    for i in byte:
        decryt.append(i ^ xor)
    for i, b in enumerate(decryt):
        idaapi.patch_byte(startEA + i, b)

def xor_dword(startEA, endEA, const):
    patch_byte = []
    size = endEA - startEA
    temp = get_bytes(startEA, size)
    for i in range(0,len(temp),4):
        test = temp[i:i+4:]
        value = struct.unpack("<I",test)
        result = value[0] ^ const
        result = struct.pack("<I", result)
        for i in result:
            patch_byte.append(i)
    currentAddr = startEA
    for i in patch_byte:
        idaapi.patch_byte(currentAddr, i)
        currentAddr += 1
    
def parse_api():
    name_arr = []
    offset = []
    with open("list_api.txt", "r") as file:
        for line in file:
            temp = line.strip().split(">")
            name = temp[0].replace("<","").split(".")
            name = name[1]
            temp = temp[1].split("- offset: ")
            offset.append(int(temp[1],16))
            name_arr.append(name)
    return dict(zip(offset, name_arr))

def comment_api_call():
    startEA, endEA = GetTextSegment()
    pattern = ["FF 53 ??", "FF 93 ??"]
    currentAddr = startEA
    call = []
    for i in pattern:
        currentAddr = startEA
        while True:
            currentAddr = idaapi.find_binary(currentAddr, endEA, i, 16, idaapi.SEARCH_DOWN)
            if currentAddr == idaapi.BADADDR:
                break
            else:
                call.append(currentAddr)
                currentAddr += len(i)
    call.sort()
    api_dict = parse_api()
    for i in call:
        insn = DecodeInstruction(i)
        offset = insn.Op1.addr
        idc.set_cmt(i, api_dict[offset],1)





